tokenização

typedef enum e_token_type {
    TOKEN_WORD,
    TOKEN_PIPE,
    TOKEN_REDIR_IN,
    TOKEN_REDIR_OUT,
    TOKEN_APPEND,
    TOKEN_HEREDOC
} t_token_type;

typedef struct s_token {
    char *value;
    t_token_type type;
    struct s_token *next;
} t_token;

expansão das variaveis

char *expand_variables(char *str, char **env)
{
    // Procura por $ e expande variáveis
    // Trata casos especiais: $?, $0, etc.
}

estrutura de comando

typedef struct s_command {
    char **args;
    char *input_file;
    char *output_file;
    int append_mode;
    struct s_command *next;
} t_command;

execução

void execute_pipeline(t_command *cmd)
{
    int prev_pipe[2];
    
    while (cmd) {
        int pipe_fd[2];
        pipe(pipe_fd);
        
        pid_t pid = fork();
        if (pid == 0) {
            setup_redirections(cmd, prev_pipe, pipe_fd);
            execve(cmd->args[0], cmd->args, environ);
        }
        
        update_pipes(prev_pipe, pipe_fd);
        cmd = cmd->next;
    }
}

builtins

// Implementar em src/builtins/
int builtin_cd(char **args);
int builtin_echo(char **args);
int builtin_pwd(void);
int builtin_export(char **args);
int builtin_unset(char **args);
int builtin_env(char **args);
int builtin_exit(char **args);

sinais

void setup_signals(void) 
{
    signal(SIGINT, handle_sigint);   // Ctrl+C
    signal(SIGQUIT, SIG_IGN);        // Ctrl+\
    signal(SIGTSTP, SIG_IGN);        // Ctrl+Z
}


LOOP PRINCIPAL

int main(void) {
    char *line;
    setup_signals();
    
    while (1) {
        line = readline("minishell> ");
        if (!line)
            break;
        
        add_history(line);
        t_token *tokens = tokenize(line);
        t_command *cmd = parse_commands(tokens);
        execute_pipeline(cmd);
        
        cleanup(line, tokens, cmd);
    }
}


atualizando..
